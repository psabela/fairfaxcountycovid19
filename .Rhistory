setwd("C:/Users/psabela/Box/RPA/RPA PAB Prod/Prevalidation Files")
args <- c("one", "blocked","passed")
proper_col_names <- c("PAB_HD_BATCH_NAME","PAB_HD_CLASS","PAB_HD_CURRENT_DATE","EXP_HD_EMPLOYEE_NAME","EXP_HD_EMPLOYEE_NUMBER","EXP_HD_ORGANIZATION","EXP_HD_EXPND_ENDING_DATE",
"EXP_LN_EXPENDITURE_ITEM_DATE","EXP_LN_EXPENDITURE_TYPE","EXP_LN_NON_LABOR_RESOURCE","EXP_LN_ORGANIZATION","EXP_LN_PROJECT","EXP_LN_TASK",
"EXP_LN_AWARD","EXP_LN_AMOUNT","EXP_LN_COMMENT")
#GET validation lists from XML files
########################################################################################################################
pta_list <- xmlToDataFrame('C:/Users/psabela/Box/RPA/RPA PAB Prod/Prevalidation Files/list_of_pta.xml',stringsAsFactors = FALSE)
names(pta_list) <- c("task", "project","award")
pta_list$pta <- paste(pta_list$project ,pta_list$task, pta_list$award, sep = '-')
exp_types_and_non_labor <- xmlToDataFrame('C:/Users/psabela/Box/RPA/RPA PAB Prod/Prevalidation Files/list_of_expenditure_types.xml',stringsAsFactors = FALSE)
names(exp_types_and_non_labor) <- c("expenditure_type","non_labor_resource")
employee_numbers <- read_csv('C:/Users/psabela/Box/RPA/RPA PAB Prod/Prevalidation Files/list_of_employee_numbers.csv')
xml.url <- "https://coa.it.gwu.edu/Coa_Files/OrganizationHierarchy.xml"
xData <- getURL(xml.url)
orgs <- xmlToDataFrame(xData, stringsAsFactors = FALSE) %>% select(account)
########################################################################################################################
rm(xData,xml.url)
#args <- commandArgs()
#args[1] IS R.NET
args <- c("one", "blocked","passed")
proper_col_names <- c("PAB_HD_BATCH_NAME","PAB_HD_CLASS","PAB_HD_CURRENT_DATE","EXP_HD_EMPLOYEE_NAME","EXP_HD_EMPLOYEE_NUMBER","EXP_HD_ORGANIZATION","EXP_HD_EXPND_ENDING_DATE",
"EXP_LN_EXPENDITURE_ITEM_DATE","EXP_LN_EXPENDITURE_TYPE","EXP_LN_NON_LABOR_RESOURCE","EXP_LN_ORGANIZATION","EXP_LN_PROJECT","EXP_LN_TASK",
"EXP_LN_AWARD","EXP_LN_AMOUNT","EXP_LN_COMMENT")
#GET validation lists from XML files
########################################################################################################################
pta_list <- xmlToDataFrame('C:/Users/psabela/Box/RPA/RPA PAB Prod/Prevalidation Files/list_of_pta.xml',stringsAsFactors = FALSE)
require(tidyverse)
require(readxl)
require(stringr)
require(lubridate)
require(XML)
require(RCurl)
require(methods)
require(openxlsx)
#args <- commandArgs()
#args[1] IS R.NET
args <- c("one", "blocked","passed")
proper_col_names <- c("PAB_HD_BATCH_NAME","PAB_HD_CLASS","PAB_HD_CURRENT_DATE","EXP_HD_EMPLOYEE_NAME","EXP_HD_EMPLOYEE_NUMBER","EXP_HD_ORGANIZATION","EXP_HD_EXPND_ENDING_DATE",
"EXP_LN_EXPENDITURE_ITEM_DATE","EXP_LN_EXPENDITURE_TYPE","EXP_LN_NON_LABOR_RESOURCE","EXP_LN_ORGANIZATION","EXP_LN_PROJECT","EXP_LN_TASK",
"EXP_LN_AWARD","EXP_LN_AMOUNT","EXP_LN_COMMENT")
#GET validation lists from XML files
########################################################################################################################
pta_list <- xmlToDataFrame('C:/Users/psabela/Box/RPA/RPA PAB Prod/Prevalidation Files/list_of_pta.xml',stringsAsFactors = FALSE)
names(pta_list) <- c("task", "project","award")
pta_list$pta <- paste(pta_list$project ,pta_list$task, pta_list$award, sep = '-')
exp_types_and_non_labor <- xmlToDataFrame('C:/Users/psabela/Box/RPA/RPA PAB Prod/Prevalidation Files/list_of_expenditure_types.xml',stringsAsFactors = FALSE)
names(exp_types_and_non_labor) <- c("expenditure_type","non_labor_resource")
employee_numbers <- read_csv('C:/Users/psabela/Box/RPA/RPA PAB Prod/Prevalidation Files/list_of_employee_numbers.csv')
xml.url <- "https://coa.it.gwu.edu/Coa_Files/OrganizationHierarchy.xml"
xData <- getURL(xml.url)
orgs <- xmlToDataFrame(xData, stringsAsFactors = FALSE) %>% select(account)
########################################################################################################################
rm(xData,xml.url)
directory_path <- "C:/Users/psabela/Box/RPA/RPA PAB Prod/Prevalidation Files/PAB Requests"
xlsxFiles <- list.files(path = directory_path, pattern = "PABDATA")
for_each_pab_request <- function(directory_path, file_name) {
data_file <- paste(directory_path ,file_name,sep = "/")
data <-  read_excel(data_file,sheet = "GM")  #readxl package
#validate column names:
col_validation <- all(proper_col_names %in% names(data))  #if false sould exit
if(col_validation == FALSE)
{
error_file <- paste("ERROR_COLUMNS" ,file_name,sep = "_")
error_file <- paste(directory_path ,error_file,sep = "/")
file.rename(from = data_file,to = error_file)
return()
}
#end of column names validation
#validate content values:
data$Pta <- paste(data$EXP_LN_PROJECT, data$EXP_LN_TASK, data$EXP_LN_AWARD, sep = '-')
if(data$PAB_HD_CLASS[1] == 'TIMECARDS')
{
#Do not need to validate home organization. It will be automatically populated using employee number.
#data$EXP_HD_ORGANIZATION <- str_extract(data$EXP_HD_ORGANIZATION, "[0-9]{6}")
}
else
{
data$EXP_LN_ORGANIZATION <- str_extract(data$EXP_LN_ORGANIZATION, "[0-9]{6}")
}
data$EXP_LN_EXPENDITURE_ITEM_DATE <-  toupper(format(data$EXP_LN_EXPENDITURE_ITEM_DATE,"%d-%b-%Y"))
data$PAB_HD_CURRENT_DATE <- toupper(format(data$PAB_HD_CURRENT_DATE,"%d-%b-%Y"))
data <- data %>% mutate(
valid_exp_type = EXP_LN_EXPENDITURE_TYPE %in% exp_types_and_non_labor$expenditure_type,
valid_non_labr = ifelse(PAB_HD_CLASS == 'TIMECARDS', TRUE, EXP_LN_NON_LABOR_RESOURCE %in% exp_types_and_non_labor$non_labor_resource),
valid_org = ifelse(PAB_HD_CLASS == 'TIMECARDS',TRUE, EXP_LN_ORGANIZATION %in% orgs$account),
valid_pta = Pta %in% pta_list$pta,
valid_emp_num = ifelse(PAB_HD_CLASS == 'TIMECARDS', EXP_HD_EMPLOYEE_NUMBER %in% employee_numbers$EMPLOYEE_NUM, TRUE),
validation_result = ifelse(valid_exp_type == TRUE &
valid_non_labr  == TRUE &
valid_org  == TRUE &
valid_emp_num == TRUE &
valid_pta  == TRUE, TRUE, FALSE) )
#change column order
data <- data %>% select(everything(),
validation_result,
valid_exp_type,
valid_non_labr,
valid_org,
valid_pta,
Pta,
valid_emp_num)
wb <- loadWorkbook(data_file)
#addWorksheet(wb,"validation_result")
#writeData(wb,"validation_result",data)
#saveWorkbook(wb,data_file,overwrite = TRUE)
blocked <- data %>% filter(validation_result == FALSE)
#addWorksheet(wb,"blocked")
#writeData(wb,"blocked",blocked)
addWorksheet(wb,args[2])
writeData(wb,args[2],blocked)
passed  <- data %>% filter(validation_result == TRUE)
#addWorksheet(wb,"passed")
#writeData(wb,"passed",passed)
addWorksheet(wb,args[3])
writeData(wb,args[3],passed)
saveWorkbook(wb,data_file,overwrite = TRUE)
}
map(xlsxFiles, ~ for_each_pab_request(directory_path,.))
debug(for_each_pab_request)
map(xlsxFiles, ~ for_each_pab_request(directory_path,.))
debug(for_each_pab_request)
setwd("C:/Users/psabela/Box/RPA/RPA PAB Prod/Prevalidation Files")
debug(for_each_pab_request)
map(xlsxFiles, ~ for_each_pab_request(directory_path,.))
directory_path <- "C:/Users/psabela/Box/RPA/RPA PAB Prod/Prevalidation Files/PAB Requests"
directory_path <- "C:/Users/psabela/Box/RPA/RPA PAB Prod/PAB Requests"
xlsxFiles <- list.files(path = directory_path, pattern = "PABDATA")
map(xlsxFiles, ~ for_each_pab_request(directory_path,.))
12027-89
11938-11718
installed_packages <- 'pacman' %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) { install.packages("pacman") }
library(pacman)
pacman::p_load(tidyverse, readr, ggplot2 ,lubridate, NLP, tm)
setwd("C:/Users/psabela/Desktop/R workspace/fairfaxcountycovid19")
df <- read_tsv("fairfaxcountycoronavirus.tsv")
my <- 8000
deltas <- c(abs(diff(df$count)),0)
df %>% ggplot() +
geom_line(aes(x = date, y = count)) +
scale_x_date(date_labels="%m/%e",date_breaks  ="1 day") +
geom_vline(xintercept = ymd('2020-03-16'), colour="blue") +
geom_text(aes(x=ymd('2020-03-16'), label="\nSchools Closed", y=my), colour="blue", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-03-23'), colour="red") +
geom_text(aes(x=ymd('2020-03-23'), label="\nBusinesses and playgrounds closed", y=my), colour="red", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-03-24'), colour="orange") +
geom_text(aes(x=ymd('2020-03-24'), label="\nGov Buildings and parks closed", y=my), colour="orange", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-03-31'), colour="brown") +
geom_text(aes(x=ymd('2020-03-31'), label="\nStay at Home Order", y=my), colour="brown", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-03-30'),colour="blue", linetype="dotted", size = 1.5) +
geom_text(aes(x=ymd('2020-03-30'), label="\n14 days after schools closed", y=my), colour="blue", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-04-06'),colour="red", linetype="dotted", size = 1.5) +
geom_text(aes(x=ymd('2020-04-06'), label="\n14 days after businesses and parks closed", y=my), colour="red", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-04-07'),colour="orange", linetype="dotted", size = 1.5) +
geom_text(aes(x=ymd('2020-04-07'), label="\n14 days after Gov buildings closed", y=my), colour="orange", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-04-14'),colour="brown", linetype="dotted", size = 1.5) +
geom_text(aes(x=ymd('2020-04-14'), label="\n14 days after stay at home order", y=my), colour="brown", angle=90, text=element_text(size=11)) +
ggtitle(label = 'Fairfax County, Virginia, COVID-19 Cases',subtitle = "source: https://www.fairfaxcounty.gov/covid19/case-information (chart by Peter Sabela)") +
ylab(label = "count") +
theme(panel.grid.minor =   element_blank(),
panel.grid.major =   element_line(colour = "white",size=0.75),
axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(position = "right", breaks = seq(from = 0,to = 13000,by = 500)) +
geom_col(aes(x = date, y = deltas)) +
geom_text(aes(x = date, y = deltas, label = deltas),angle=90, size=3,nudge_y = 300)
installed_packages <- 'pacman' %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) { install.packages("pacman") }
library(pacman)
pacman::p_load(tidyverse, readr, ggplot2 ,lubridate, NLP, tm)
setwd("C:/Users/psabela/Desktop/R workspace/fairfaxcountycovid19")
df <- read_tsv("fairfaxcountycoronavirus.tsv")
my <- 8000
deltas <- c(abs(diff(df$count)),0)
df %>% ggplot() +
geom_line(aes(x = date, y = count)) +
scale_x_date(date_labels="%m/%e",date_breaks  ="1 day") +
geom_vline(xintercept = ymd('2020-03-16'), colour="blue") +
geom_text(aes(x=ymd('2020-03-16'), label="\nSchools Closed", y=my), colour="blue", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-03-23'), colour="red") +
geom_text(aes(x=ymd('2020-03-23'), label="\nBusinesses and playgrounds closed", y=my), colour="red", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-03-24'), colour="orange") +
geom_text(aes(x=ymd('2020-03-24'), label="\nGov Buildings and parks closed", y=my), colour="orange", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-03-31'), colour="brown") +
geom_text(aes(x=ymd('2020-03-31'), label="\nStay at Home Order", y=my), colour="brown", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-03-30'),colour="blue", linetype="dotted", size = 1.5) +
geom_text(aes(x=ymd('2020-03-30'), label="\n14 days after schools closed", y=my), colour="blue", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-04-06'),colour="red", linetype="dotted", size = 1.5) +
geom_text(aes(x=ymd('2020-04-06'), label="\n14 days after businesses and parks closed", y=my), colour="red", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-04-07'),colour="orange", linetype="dotted", size = 1.5) +
geom_text(aes(x=ymd('2020-04-07'), label="\n14 days after Gov buildings closed", y=my), colour="orange", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-04-14'),colour="brown", linetype="dotted", size = 1.5) +
geom_text(aes(x=ymd('2020-04-14'), label="\n14 days after stay at home order", y=my), colour="brown", angle=90, text=element_text(size=11)) +
ggtitle(label = 'Fairfax County, Virginia, COVID-19 Cases',subtitle = "source: https://www.fairfaxcounty.gov/covid19/case-information (chart by Peter Sabela)") +
ylab(label = "count") +
theme(panel.grid.minor =   element_blank(),
panel.grid.major =   element_line(colour = "white",size=0.75),
axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(position = "right", breaks = seq(from = 0,to = 13000,by = 500)) +
geom_col(aes(x = date, y = deltas)) +
geom_text(aes(x = date, y = deltas, label = deltas),angle=90, size=3,nudge_y = 300)
