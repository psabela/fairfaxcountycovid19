library(stringr)
setwd("G:/Groups/FSS Projects/2018 DCFs Grants/Data Source Assembly")
#load packages
require(magrittr)
require(tidyverse)
require(readxl)
require(forcats)
library(stringr)
library(lubridate)
library(uuid)
library(ggplot2)
library(purrr)
library(xml2)
require(XLConnect)
library(DBI)
library(RJDBC)
setwd("G:/Groups/FSS Projects/2018 DCFs Grants/Data Source Assembly")
ap_invoice_distributions_all <- read_tsv('export.tsv')
d_from <- unique(ap_invoice_distributions_all$DATE_FROM)
d_to <- unique(ap_invoice_distributions_all$DATE_TO)
org_descriptions <- read_tsv('org_descriptions.tsv')
acct_descriptions <- read_tsv('acct_descriptions.tsv')
FromPTA <- function(result)
{
output <- vector("logical",nrow(result))
for(i in 1:nrow(result))
{
output[[i]] <- all(unlist(str_split(result[i,"mPTA"],"\\|"))[which(unlist(str_split(result[i,"mTYPE"],"\\|")) == 'cr')] != 'NA')
}
output
}
ToPTA <- function(result)
{
output <- vector("logical",nrow(result))
for(i in 1:nrow(result))
{
output[[i]] <- all(unlist(str_split(result[i,"mPTA"],"\\|"))[which(unlist(str_split(result[i,"mTYPE"],"\\|")) == 'dr')] != 'NA')
}
output
}
FromFED <- function(result)
{
output <- vector("logical",nrow(result))
for(i in 1:nrow(result))
{
output[[i]] <- all(str_sub(unlist(str_split(result[i,"mPTA"], "\\|"))[which(unlist(str_split(result[i,"mTYPE"],"\\|")) == 'cr')], -1) == 'F')
}
output
}
ToFED <- function(result)
{
output <- vector("logical",nrow(result))
for(i in 1:nrow(result))
{
output[[i]] <- any(str_sub(unlist(str_split(result[i,"mPTA"], "\\|"))[which(unlist(str_split(result[i,"mTYPE"],"\\|")) == 'dr')], -1) == 'F')
}
output
}
FromEE <- function(result)
{
output <- vector("logical",nrow(result))
for(i in 1:nrow(result))
{
output[[i]] <- any(str_sub(unlist(str_split(result[i,"mPTA"], "\\|"))[which(unlist(str_split(result[i,"mTYPE"],"\\|")) == 'cr')], -10,-9) == 'EE')
}
output
}
ToEE <- function(result)
{
output <- vector("logical",nrow(result))
for(i in 1:nrow(result))
{
output[[i]] <- any(str_sub(unlist(str_split(result[i,"mPTA"], "\\|"))[which(unlist(str_split(result[i,"mTYPE"],"\\|")) == 'dr')], -10,-9) == 'EE')
}
output
}
ap_invoice_distributions_all_c <- ap_invoice_distributions_all %>%
arrange(INVOICE_ID, CREATION_DATE,REQUEST_ID) %>%
mutate(PTA = str_c(PROJECT,TASK,AWARD,sep = '-'),
CREATION_DATE = dmy(str_sub(CREATION_DATE,1,10)),
GL_DATE = dmy(str_sub(GL_DATE,1,10)),
DIST_ACCT_DATE = dmy(str_sub(DIST_ACCT_DATE,1,10)))
#select Grants
ap_grants_invoice_distributions_all <- ap_invoice_distributions_all_c %>%
group_by(INVOICE_ID) %>%
mutate(ENVOLVES_PTA = any(HAS_PTA == 'Y')) %>%
filter(ENVOLVES_PTA==T) %>% ungroup()
award_and_type <- ap_grants_invoice_distributions_all %>% distinct(AWARD,AWARD_TYPE)
grants_date_analysis <- ap_grants_invoice_distributions_all %>%
group_by(INVOICE_ID, CREATION_DATE) %>%
summarise(SUBTOTAL = sum(AMOUNT,na.rm = T)) %>%
arrange(CREATION_DATE) %>%
mutate(SEQ = 1 : n(), ROWNUM = n())
grants_date_analysis <- grants_date_analysis %>%
mutate(first_date = as.Date(ifelse(SEQ==1,CREATION_DATE,NA), origin = "1970-01-01"))
grants_date_analysis <- grants_date_analysis %>%  fill(first_date,.direction = "down")
grants_date_analysis <- grants_date_analysis %>%
mutate(LAPS = difftime(CREATION_DATE, first_date, units = "days"))
ag.grants <- ap_grants_invoice_distributions_all %>%
left_join(grants_date_analysis %>% select(INVOICE_ID, CREATION_DATE, SEQ, ROWNUM, LAPS))
ag.grants <-  ag.grants %>%
mutate(TRANS_TYPE = ifelse(SEQ == 1, 'original', ifelse(AMOUNT < 0,'transfer_from','transfer_to')))
ag.grants <-  ag.grants %>% filter(ROWNUM > 1) %>% group_by(INVOICE_ID,INV_SOURCE,INVOICE_NUM,GL_DATE,CREATION_DATE,DIST_ACCT_DATE,AWARD_PURPOSE_CODE,HAS_PTA,DIST_CODE_COMBINATION_ID,SEGMENT1,SEGMENT2,EXPENDITURE_TYPE,SEGMENT3,SEGMENT4,PROJECT,PTA,FINDIR,TRANS_TYPE, LAPS) %>%
summarise(SUBTOTAL = sum(AMOUNT,na.rm = T))
ag.grants <- ag.grants %>% filter(TRANS_TYPE!='original') %>%
select(INVOICE_ID,INV_SOURCE,INVOICE_NUM,GL_DATE,CREATION_DATE,DIST_ACCT_DATE,AWARD_PURPOSE_CODE, HAS_PTA,DIST_CODE_COMBINATION_ID,SEGMENT1,SEGMENT2, EXPENDITURE_TYPE, SEGMENT3,SEGMENT4,PROJECT, PTA, FINDIR, TRANS_TYPE,  LAPS, SUBTOTAL) %>%
spread(key = "TRANS_TYPE", value = "SUBTOTAL")
ag.grants <- ungroup(ag.grants)
df <- ag.grants
#dr and cr
df <- df %>% mutate(drr = ifelse(is.na(transfer_to),0,abs(transfer_to)),
crr = ifelse(is.na(transfer_from),0,abs(transfer_from)),
grouping.id = INVOICE_ID)
df <- df %>% mutate(dr = round(ifelse((drr - crr) >= 0, drr - crr , 0),2),
cr = round(ifelse((crr - drr) >= 0, crr - drr , 0),2))
df <- df %>% mutate(dr = ifelse(is.na(dr),0,abs(dr)), cr = ifelse(is.na(cr),0,abs(cr))) %>%
filter(dr != cr) %>%
arrange(grouping.id)
result <- df
result <- result[,c("grouping.id","INVOICE_NUM","INV_SOURCE","GL_DATE","CREATION_DATE","DIST_ACCT_DATE","AWARD_PURPOSE_CODE","SEGMENT1","SEGMENT2","EXPENDITURE_TYPE","SEGMENT3","SEGMENT4","PROJECT", "PTA","FINDIR","LAPS", "dr","cr")]
result <- result %>%
gather(type,amount, -grouping.id,-INVOICE_NUM,-INV_SOURCE,-GL_DATE,-CREATION_DATE,-DIST_ACCT_DATE,-AWARD_PURPOSE_CODE,-SEGMENT1,-SEGMENT2,-EXPENDITURE_TYPE,-SEGMENT3,-SEGMENT4,-PROJECT, -PTA,-FINDIR, - LAPS) %>%
arrange(grouping.id,type) %>% filter(amount != 0)
result <- result %>%
#group_by(grouping.id,INVOICE_NUM,INV_SOURCE,CREATION_DATE, LAPS) %>%
group_by(grouping.id,INVOICE_NUM,INV_SOURCE,GL_DATE) %>%
summarise(mSEGMENT1=paste(SEGMENT1,collapse = '|'),
mSEGMENT2=paste(SEGMENT2,collapse = '|'),
mEXPENDITURE_TYPE=paste(EXPENDITURE_TYPE,collapse = '|'),
mSEGMENT3=paste(SEGMENT3,collapse = '|'),
mSEGMENT4=paste(SEGMENT4,collapse = '|'),
mDIST_ACCT_DATE=paste(DIST_ACCT_DATE,collapse = '|'),
mAWARD_PURPOSE_CODE=paste(AWARD_PURPOSE_CODE,collapse = '|'),
mPROJECT=paste(PROJECT,collapse = '|'),
mPTA=paste(PTA,collapse = '|'),
mFINDIR=paste(FINDIR,collapse = '|'),
mTYPE = paste(type,collapse = '|'),
mLAPS = paste(LAPS,collapse = '|'),
mAMOUNT = paste(amount,collapse = '|')) %>%
distinct()
result$chSEGMENT1 <-unlist(lapply(result$mSEGMENT1, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result$chSEGMENT2 <-unlist(lapply(result$mSEGMENT2, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result$chSEGMENT3 <-unlist(lapply(result$mSEGMENT3, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result$chSEGMENT4 <-unlist(lapply(result$mSEGMENT4, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result$chAWARD_PURPOSE_CODE <-unlist(lapply(result$mAWARD_PURPOSE_CODE, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result$chEXPTYPE  <-unlist(lapply(result$mEXPENDITURE_TYPE, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result$chPTA      <-unlist(lapply(result$mPTA, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result$chPROJECT <-unlist(lapply(result$mPROJECT, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result$chFINDIR <-unlist(lapply(result$mFINDIR, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result <-  ungroup(result)
#result <- result %>% select(grouping.id,INVOICE_NUM,INV_SOURCE,GL_DATE,CREATION_DATE, LAPS,
result <- result %>% select(grouping.id,INVOICE_NUM,INV_SOURCE,GL_DATE,mDIST_ACCT_DATE,mAWARD_PURPOSE_CODE,chAWARD_PURPOSE_CODE,mLAPS, mSEGMENT1,chSEGMENT1,mSEGMENT2,chSEGMENT2,mSEGMENT3,chSEGMENT3,mSEGMENT4,chSEGMENT4,mEXPENDITURE_TYPE, chEXPTYPE,mPTA, chPTA,mPROJECT, chPROJECT,mFINDIR, chFINDIR,mTYPE,mAMOUNT)
result$pta_from <- FromPTA(result)
result$pta_to <- ToPTA(result)
result$fed_from <- FromFED(result)
result$fed_to <- ToFED(result)
result$EE_from <- FromEE(result)
result$EE_to <- ToEE(result)
result$sides <- unlist(map(result$mSEGMENT1, ~ length(unlist((str_split(.,"\\|"))))))
result <- result %>% filter(sides > 1)
result.unnested <- result %>%
transform(
mTYPE = strsplit(mTYPE, "\\|"),
mLAPS = strsplit(mLAPS, "\\|"),
mSEGMENT1 = strsplit(mSEGMENT1, "\\|"),
mSEGMENT2 = strsplit(mSEGMENT2, "\\|"),
mSEGMENT3 = strsplit(mSEGMENT3, "\\|"),
mSEGMENT4 = strsplit(mSEGMENT4, "\\|"),
mDIST_ACCT_DATE = strsplit(mDIST_ACCT_DATE, "\\|"),
mAWARD_PURPOSE_CODE = strsplit(mAWARD_PURPOSE_CODE, "\\|"),
mEXPENDITURE_TYPE = strsplit(mEXPENDITURE_TYPE, "\\|"),
mPTA = strsplit(mPTA, "\\|"),
mPROJECT = strsplit(mPROJECT, "\\|"),
mFINDIR = strsplit(mFINDIR, "\\|"),
mAMOUNT = strsplit(mAMOUNT, "\\|")
) %>%
unnest(mTYPE,mLAPS, mSEGMENT1,mSEGMENT2,mSEGMENT3,mSEGMENT4, mDIST_ACCT_DATE, mAWARD_PURPOSE_CODE, mEXPENDITURE_TYPE, mPTA, mPROJECT, mFINDIR,mAMOUNT)
result.unnested <- result.unnested %>% group_by(grouping.id) %>% mutate(ENVOLVES_PTA = any(mPTA != 'NA'))
result.unnested <- result.unnested %>% filter(ENVOLVES_PTA == TRUE)
result$date_from <- d_from
result$date_to <- d_to
result.unnested$date_from <- d_from
result.unnested$date_to <- d_to
result.unnested <- result.unnested %>% mutate(AWARD = str_sub(mPTA,-10)) %>% left_join(award_and_type)
library(XLConnect)
#create excel file
wb <- loadWorkbook("result3.xlsx", create = TRUE)
#create excel file
wb <- loadWorkbook("result5.xlsx", create = TRUE)
createSheet(wb,name='data')
writeWorksheet(wb,result.unnested, sheet = "data",startRow = 1)
createSheet(wb,name='nesteddata')
writeWorksheet(wb,result, sheet = "nesteddata",startRow = 1)
createSheet(wb,name='org_data')
writeWorksheet(wb,org_descriptions, sheet = "org_data",startRow = 1)
createSheet(wb,name='acct_data')
writeWorksheet(wb,acct_descriptions, sheet = "acct_data",startRow = 1)
dcf.summary <- ap_invoice_distributions_all %>%
filter(HAS_PTA == 'Y') %>%
select(INVOICE_ID, FINDIR) %>%
distinct(INVOICE_ID, FINDIR) %>%
group_by(FINDIR) %>%
summarise(grants_invoices = n()) %>%
full_join(result.unnested %>%
select(grouping.id, mFINDIR) %>%
group_by(grouping.id, mFINDIR) %>%
distinct() %>%
group_by(mFINDIR) %>%
summarise(grants_dcf = n()), by = c("FINDIR" = "mFINDIR"))
createSheet(wb,name='summary')
writeWorksheet(wb,dcf.summary, sheet = "summary",startRow = 1)
saveWorkbook(wb)
write_tsv(result.unnested, 'result.tsv')
installed_packages <- 'pacman' %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) { install.packages("pacman") }
library(pacman)
pacman::p_load(magrittr,tidyverse, readxl,forcats,stringr,lubridate,uuid,ggplot2,purr,xml2,XLConnect)
setwd("C:\Users\psabela\Box\SAIG Shared Reports\GCAS\DCF\Data Source Assembly")
getValueFromGwuChart <- function(value = "100070", type = "Organization"){
#Types:
#NAccount
#Organization
#FundingSource
html <- read_html(str_c("https://coa.it.gwu.edu/",type,"/Description?account=",value))
n <- xml_find_first(html,".//h4")
xml_text(n)
}
getValueFromGwuChart(value = "000000")
getValueFromGwuChart(value = "000000")
getValueFromGwuChart()
getValueFromGwuChart(value = "000000")
getValueFromGwuChart(value = "161101")
getValueFromGwuChart(value = "400000")
installed_packages <- 'pacman' %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) { install.packages("pacman") }
library(pacman)
pacman::p_load(magrittr,tidyverse, readxl,forcats,stringr,lubridate,uuid,ggplot2,purr,xml2,XLConnect)
#load packages
#require(magrittr)
#require(tidyverse)
#require(readxl)
#require(forcats)
#library(stringr)
#library(lubridate)
#library(uuid)
#library(ggplot2)
#library(purrr)
#library(xml2)
#require(XLConnect)
#library(DBI)
#library(RJDBC)
setwd("C:\Users\psabela\Box\SAIG Shared Reports\GCAS\DCF\Data Source Assembly")
getValueFromGwuChart <- function(value = "100070", type = "Organization"){
#Types:
#NAccount
#Organization
#FundingSource
html <- read_html(str_c("https://coa.it.gwu.edu/",type,"/Description?account=",value))
n <- xml_find_first(html,".//h4")
xml_text(n)
}
ap_invoice_distributions_all <- read_tsv('export.tsv')
d_from <- unique(ap_invoice_distributions_all$DATE_FROM)
d_to <- unique(ap_invoice_distributions_all$DATE_TO)
org_descriptions <- read_tsv('org_descriptions.tsv')
acct_descriptions <- read_tsv('acct_descriptions.tsv')
FromPTA <- function(result)
{
output <- vector("logical",nrow(result))
for(i in 1:nrow(result))
{
output[[i]] <- all(unlist(str_split(result[i,"mPTA"],"\\|"))[which(unlist(str_split(result[i,"mTYPE"],"\\|")) == 'cr')] != 'NA')
}
output
}
ToPTA <- function(result)
{
output <- vector("logical",nrow(result))
for(i in 1:nrow(result))
{
output[[i]] <- all(unlist(str_split(result[i,"mPTA"],"\\|"))[which(unlist(str_split(result[i,"mTYPE"],"\\|")) == 'dr')] != 'NA')
}
output
}
FromFED <- function(result)
{
output <- vector("logical",nrow(result))
for(i in 1:nrow(result))
{
output[[i]] <- all(str_sub(unlist(str_split(result[i,"mPTA"], "\\|"))[which(unlist(str_split(result[i,"mTYPE"],"\\|")) == 'cr')], -1) == 'F')
}
output
}
ToFED <- function(result)
{
output <- vector("logical",nrow(result))
for(i in 1:nrow(result))
{
output[[i]] <- any(str_sub(unlist(str_split(result[i,"mPTA"], "\\|"))[which(unlist(str_split(result[i,"mTYPE"],"\\|")) == 'dr')], -1) == 'F')
}
output
}
FromEE <- function(result)
{
output <- vector("logical",nrow(result))
for(i in 1:nrow(result))
{
output[[i]] <- any(str_sub(unlist(str_split(result[i,"mPTA"], "\\|"))[which(unlist(str_split(result[i,"mTYPE"],"\\|")) == 'cr')], -10,-9) == 'EE')
}
output
}
ToEE <- function(result)
{
output <- vector("logical",nrow(result))
for(i in 1:nrow(result))
{
output[[i]] <- any(str_sub(unlist(str_split(result[i,"mPTA"], "\\|"))[which(unlist(str_split(result[i,"mTYPE"],"\\|")) == 'dr')], -10,-9) == 'EE')
}
output
}
ap_invoice_distributions_all_c <- ap_invoice_distributions_all %>%
arrange(INVOICE_ID, CREATION_DATE,REQUEST_ID) %>%
mutate(PTA = str_c(PROJECT,TASK,AWARD,sep = '-'),
CREATION_DATE = dmy(str_sub(CREATION_DATE,1,10)),
GL_DATE = dmy(str_sub(GL_DATE,1,10)),
DIST_ACCT_DATE = dmy(str_sub(DIST_ACCT_DATE,1,10)))
#select Grants
ap_grants_invoice_distributions_all <- ap_invoice_distributions_all_c %>%
group_by(INVOICE_ID) %>%
mutate(ENVOLVES_PTA = any(HAS_PTA == 'Y')) %>%
filter(ENVOLVES_PTA==T) %>% ungroup()
award_and_type <- ap_grants_invoice_distributions_all %>% distinct(AWARD,AWARD_TYPE)
grants_date_analysis <- ap_grants_invoice_distributions_all %>%
group_by(INVOICE_ID, CREATION_DATE) %>%
summarise(SUBTOTAL = sum(AMOUNT,na.rm = T)) %>%
arrange(CREATION_DATE) %>%
mutate(SEQ = 1 : n(), ROWNUM = n())
grants_date_analysis <- grants_date_analysis %>%
mutate(first_date = as.Date(ifelse(SEQ==1,CREATION_DATE,NA), origin = "1970-01-01"))
grants_date_analysis <- grants_date_analysis %>%  fill(first_date,.direction = "down")
grants_date_analysis <- grants_date_analysis %>%
mutate(LAPS = difftime(CREATION_DATE, first_date, units = "days"))
ag.grants <- ap_grants_invoice_distributions_all %>%
left_join(grants_date_analysis %>% select(INVOICE_ID, CREATION_DATE, SEQ, ROWNUM, LAPS))
ag.grants <-  ag.grants %>%
mutate(TRANS_TYPE = ifelse(SEQ == 1, 'original', ifelse(AMOUNT < 0,'transfer_from','transfer_to')))
ag.grants <-  ag.grants %>% filter(ROWNUM > 1) %>% group_by(INVOICE_ID,INV_SOURCE,INVOICE_NUM,GL_DATE,CREATION_DATE,DIST_ACCT_DATE,AWARD_PURPOSE_CODE,HAS_PTA,DIST_CODE_COMBINATION_ID,SEGMENT1,SEGMENT2,EXPENDITURE_TYPE,SEGMENT3,SEGMENT4,PROJECT,PTA,FINDIR,TRANS_TYPE, LAPS) %>%
summarise(SUBTOTAL = sum(AMOUNT,na.rm = T))
ag.grants <- ag.grants %>% filter(TRANS_TYPE!='original') %>%
select(INVOICE_ID,INV_SOURCE,INVOICE_NUM,GL_DATE,CREATION_DATE,DIST_ACCT_DATE,AWARD_PURPOSE_CODE, HAS_PTA,DIST_CODE_COMBINATION_ID,SEGMENT1,SEGMENT2, EXPENDITURE_TYPE, SEGMENT3,SEGMENT4,PROJECT, PTA, FINDIR, TRANS_TYPE,  LAPS, SUBTOTAL) %>%
spread(key = "TRANS_TYPE", value = "SUBTOTAL")
ag.grants <- ungroup(ag.grants)
df <- ag.grants
#dr and cr
df <- df %>% mutate(drr = ifelse(is.na(transfer_to),0,abs(transfer_to)),
crr = ifelse(is.na(transfer_from),0,abs(transfer_from)),
grouping.id = INVOICE_ID)
df <- df %>% mutate(dr = round(ifelse((drr - crr) >= 0, drr - crr , 0),2),
cr = round(ifelse((crr - drr) >= 0, crr - drr , 0),2))
df <- df %>% mutate(dr = ifelse(is.na(dr),0,abs(dr)), cr = ifelse(is.na(cr),0,abs(cr))) %>%
filter(dr != cr) %>%
arrange(grouping.id)
result <- df
result <- result[,c("grouping.id","INVOICE_NUM","INV_SOURCE","GL_DATE","CREATION_DATE","DIST_ACCT_DATE","AWARD_PURPOSE_CODE","SEGMENT1","SEGMENT2","EXPENDITURE_TYPE","SEGMENT3","SEGMENT4","PROJECT", "PTA","FINDIR","LAPS", "dr","cr")]
result <- result %>%
gather(type,amount, -grouping.id,-INVOICE_NUM,-INV_SOURCE,-GL_DATE,-CREATION_DATE,-DIST_ACCT_DATE,-AWARD_PURPOSE_CODE,-SEGMENT1,-SEGMENT2,-EXPENDITURE_TYPE,-SEGMENT3,-SEGMENT4,-PROJECT, -PTA,-FINDIR, - LAPS) %>%
arrange(grouping.id,type) %>% filter(amount != 0)
result <- result %>%
#group_by(grouping.id,INVOICE_NUM,INV_SOURCE,CREATION_DATE, LAPS) %>%
group_by(grouping.id,INVOICE_NUM,INV_SOURCE,GL_DATE) %>%
summarise(mSEGMENT1=paste(SEGMENT1,collapse = '|'),
mSEGMENT2=paste(SEGMENT2,collapse = '|'),
mEXPENDITURE_TYPE=paste(EXPENDITURE_TYPE,collapse = '|'),
mSEGMENT3=paste(SEGMENT3,collapse = '|'),
mSEGMENT4=paste(SEGMENT4,collapse = '|'),
mDIST_ACCT_DATE=paste(DIST_ACCT_DATE,collapse = '|'),
mAWARD_PURPOSE_CODE=paste(AWARD_PURPOSE_CODE,collapse = '|'),
mPROJECT=paste(PROJECT,collapse = '|'),
mPTA=paste(PTA,collapse = '|'),
mFINDIR=paste(FINDIR,collapse = '|'),
mTYPE = paste(type,collapse = '|'),
mLAPS = paste(LAPS,collapse = '|'),
mAMOUNT = paste(amount,collapse = '|')) %>%
distinct()
result$chSEGMENT1 <-unlist(lapply(result$mSEGMENT1, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result$chSEGMENT2 <-unlist(lapply(result$mSEGMENT2, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result$chSEGMENT3 <-unlist(lapply(result$mSEGMENT3, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result$chSEGMENT4 <-unlist(lapply(result$mSEGMENT4, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result$chAWARD_PURPOSE_CODE <-unlist(lapply(result$mAWARD_PURPOSE_CODE, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result$chEXPTYPE  <-unlist(lapply(result$mEXPENDITURE_TYPE, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result$chPTA      <-unlist(lapply(result$mPTA, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result$chPROJECT <-unlist(lapply(result$mPROJECT, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result$chFINDIR <-unlist(lapply(result$mFINDIR, function(x)  ifelse(all(unlist(strsplit(x,'\\|')) == first(unlist(strsplit(x,'\\|')))),FALSE, TRUE)))
result <-  ungroup(result)
#result <- result %>% select(grouping.id,INVOICE_NUM,INV_SOURCE,GL_DATE,CREATION_DATE, LAPS,
result <- result %>% select(grouping.id,INVOICE_NUM,INV_SOURCE,GL_DATE,mDIST_ACCT_DATE,mAWARD_PURPOSE_CODE,chAWARD_PURPOSE_CODE,mLAPS, mSEGMENT1,chSEGMENT1,mSEGMENT2,chSEGMENT2,mSEGMENT3,chSEGMENT3,mSEGMENT4,chSEGMENT4,mEXPENDITURE_TYPE, chEXPTYPE,mPTA, chPTA,mPROJECT, chPROJECT,mFINDIR, chFINDIR,mTYPE,mAMOUNT)
result$pta_from <- FromPTA(result)
result$pta_to <- ToPTA(result)
result$fed_from <- FromFED(result)
result$fed_to <- ToFED(result)
result$EE_from <- FromEE(result)
result$EE_to <- ToEE(result)
result$sides <- unlist(map(result$mSEGMENT1, ~ length(unlist((str_split(.,"\\|"))))))
result <- result %>% filter(sides > 1)
#result <- result %>% filter(CREATION_DATE >= ymd('2018-02-01') & CREATION_DATE <= ymd('2018-02-28'))
result.unnested <- result %>%
transform(
mTYPE = strsplit(mTYPE, "\\|"),
mLAPS = strsplit(mLAPS, "\\|"),
mSEGMENT1 = strsplit(mSEGMENT1, "\\|"),
mSEGMENT2 = strsplit(mSEGMENT2, "\\|"),
mSEGMENT3 = strsplit(mSEGMENT3, "\\|"),
mSEGMENT4 = strsplit(mSEGMENT4, "\\|"),
mDIST_ACCT_DATE = strsplit(mDIST_ACCT_DATE, "\\|"),
mAWARD_PURPOSE_CODE = strsplit(mAWARD_PURPOSE_CODE, "\\|"),
mEXPENDITURE_TYPE = strsplit(mEXPENDITURE_TYPE, "\\|"),
mPTA = strsplit(mPTA, "\\|"),
mPROJECT = strsplit(mPROJECT, "\\|"),
mFINDIR = strsplit(mFINDIR, "\\|"),
mAMOUNT = strsplit(mAMOUNT, "\\|")
) %>%
unnest(mTYPE,mLAPS, mSEGMENT1,mSEGMENT2,mSEGMENT3,mSEGMENT4, mDIST_ACCT_DATE, mAWARD_PURPOSE_CODE, mEXPENDITURE_TYPE, mPTA, mPROJECT, mFINDIR,mAMOUNT)
result.unnested <- result.unnested %>% group_by(grouping.id) %>% mutate(ENVOLVES_PTA = any(mPTA != 'NA'))
result.unnested <- result.unnested %>% filter(ENVOLVES_PTA == TRUE)
result$date_from <- d_from
result$date_to <- d_to
result.unnested$date_from <- d_from
result.unnested$date_to <- d_to
result.unnested <- result.unnested %>% mutate(AWARD = str_sub(mPTA,-10)) %>% left_join(award_and_type)
library(XLConnect)
#create excel file
wb <- loadWorkbook("result.xlsx", create = TRUE)
createSheet(wb,name='data')
writeWorksheet(wb,result.unnested, sheet = "data",startRow = 1)
createSheet(wb,name='nesteddata')
writeWorksheet(wb,result, sheet = "nesteddata",startRow = 1)
createSheet(wb,name='org_data')
writeWorksheet(wb,org_descriptions, sheet = "org_data",startRow = 1)
createSheet(wb,name='acct_data')
writeWorksheet(wb,acct_descriptions, sheet = "acct_data",startRow = 1)
dcf.summary <- ap_invoice_distributions_all %>%
filter(HAS_PTA == 'Y') %>%
select(INVOICE_ID, FINDIR) %>%
distinct(INVOICE_ID, FINDIR) %>%
group_by(FINDIR) %>%
summarise(grants_invoices = n()) %>%
full_join(result.unnested %>%
select(grouping.id, mFINDIR) %>%
group_by(grouping.id, mFINDIR) %>%
distinct() %>%
group_by(mFINDIR) %>%
summarise(grants_dcf = n()), by = c("FINDIR" = "mFINDIR"))
createSheet(wb,name='summary')
writeWorksheet(wb,dcf.summary, sheet = "summary",startRow = 1)
saveWorkbook(wb)
write_tsv(result.unnested, 'result.tsv')
setwd("C:/Users/psabela/Desktop/R workspace/fairfaxcountycovid19")
installed_packages <- 'pacman' %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) { install.packages("pacman") }
library(pacman)
pacman::p_load(tidyverse, readr, ggplot2 ,lubridate, NLP, tm)
setwd("C:/Users/psabela/Desktop/R workspace/fairfaxcountycovid19")
df <- read_tsv("fairfaxcountycoronavirus.tsv")
df %>% ggplot() +
geom_line(aes(x = date, y = count)) +
scale_x_date(date_labels="%d %b",date_breaks  ="1 day") +
scale_y_continuous(breaks = seq(from = 0,to = 1600,by = 50)) +
geom_vline(xintercept = ymd('2020-03-16'), colour="blue") +
geom_text(aes(x=ymd('2020-03-16'), label="\nSchools Closed", y=250), colour="blue", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-03-23'), colour="red") +
geom_text(aes(x=ymd('2020-03-23'), label="\nBusinesses and playgrounds closed", y=250), colour="red", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-03-24'), colour="orange") +
geom_text(aes(x=ymd('2020-03-24'), label="\nGov Buildings and parks closed", y=250), colour="orange", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-03-31'), colour="brown") +
geom_text(aes(x=ymd('2020-03-31'), label="\nStay at Home Order", y=250), colour="brown", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-03-30'),colour="blue", linetype="dotted", size = 1.5) +
geom_text(aes(x=ymd('2020-03-30'), label="\n14 days after schools closed", y=250), colour="blue", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-04-06'),colour="red", linetype="dotted", size = 1.5) +
geom_text(aes(x=ymd('2020-04-06'), label="\n14 days after businesses and parks closed", y=250), colour="red", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-04-07'),colour="orange", linetype="dotted", size = 1.5) +
geom_text(aes(x=ymd('2020-04-07'), label="\n14 days after Gov buildings closed", y=250), colour="orange", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-04-14'),colour="brown", linetype="dotted", size = 1.5) +
geom_text(aes(x=ymd('2020-04-14'), label="\n14 days after stay at home order", y=250), colour="brown", angle=90, text=element_text(size=11)) +
ggtitle(label = 'Fairfax County, Virginia, COVID-19 Cases',subtitle = "source: https://www.fairfaxcounty.gov/covid19/case-information (chart by Peter Sabela)") +
ylab(label = "count") +
theme(panel.grid.minor =   element_blank(),
panel.grid.major =   element_line(colour = "white",size=0.75)) +
scale_y_continuous(position = "right")
df %>% ggplot() +
geom_line(aes(x = date, y = count)) +
scale_x_date(date_labels="%d %b",date_breaks  ="1 day") +
geom_vline(xintercept = ymd('2020-03-16'), colour="blue") +
geom_text(aes(x=ymd('2020-03-16'), label="\nSchools Closed", y=250), colour="blue", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-03-23'), colour="red") +
geom_text(aes(x=ymd('2020-03-23'), label="\nBusinesses and playgrounds closed", y=250), colour="red", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-03-24'), colour="orange") +
geom_text(aes(x=ymd('2020-03-24'), label="\nGov Buildings and parks closed", y=250), colour="orange", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-03-31'), colour="brown") +
geom_text(aes(x=ymd('2020-03-31'), label="\nStay at Home Order", y=250), colour="brown", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-03-30'),colour="blue", linetype="dotted", size = 1.5) +
geom_text(aes(x=ymd('2020-03-30'), label="\n14 days after schools closed", y=250), colour="blue", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-04-06'),colour="red", linetype="dotted", size = 1.5) +
geom_text(aes(x=ymd('2020-04-06'), label="\n14 days after businesses and parks closed", y=250), colour="red", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-04-07'),colour="orange", linetype="dotted", size = 1.5) +
geom_text(aes(x=ymd('2020-04-07'), label="\n14 days after Gov buildings closed", y=250), colour="orange", angle=90, text=element_text(size=11)) +
geom_vline(xintercept = ymd('2020-04-14'),colour="brown", linetype="dotted", size = 1.5) +
geom_text(aes(x=ymd('2020-04-14'), label="\n14 days after stay at home order", y=250), colour="brown", angle=90, text=element_text(size=11)) +
ggtitle(label = 'Fairfax County, Virginia, COVID-19 Cases',subtitle = "source: https://www.fairfaxcounty.gov/covid19/case-information (chart by Peter Sabela)") +
ylab(label = "count") +
theme(panel.grid.minor =   element_blank(),
panel.grid.major =   element_line(colour = "white",size=0.75)) +
scale_y_continuous(position = "right", breaks = seq(from = 0,to = 1600,by = 100))
